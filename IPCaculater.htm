<!-- =LEFT(B2,3)*16777216+MID(B2,5,3)*65536+MID(B2,9,2)*256+MID(B2,12,3) -->
<HTML><HEAD>
<meta http-equiv="Content-Language" content="zh-cn">
<TITLE>网络计算器</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<STYLE type=text/css>BODY {
	MARGIN: 40px; COLOR: #cccc99; BACKGROUND-COLOR: #2d2d2d
}
</STYLE>

<SCRIPT language=JavaScript>
function d2h(decimal)
	{
	var j=decimal;
    	var hexchars =  "0123456789ABCDEF";
    	var hv = "";
    	for (var i=0; i< 2; i++)
      	{
        	k = j & 15;
        	hv = hexchars.charAt(k) + hv;
        	j = j >> 4;
      	}
	return (hv);
	}

function h2d(hex)
	{
  	var j = hex.toUpperCase();
  	var d = 0;
  	var ch = ' ';
  	var hexchars =  "0123456789ABCDEF";
  	while (j.length < 4) j = 0 + j;
  	for (var i = 0; i < 4; i++)
    		{
      	ch = j.charAt(i);
      	d = d*16 + hexchars.indexOf(ch); 
    		}
    		return (d);
	}

function d2b(decimal)
	{		
	var bit8=0,bit7=0,bit6=0,bit5=0,bit4=0,bit3=0,bit2=0,bit1=0;				
	if (decimal & 128) { bit8 = 1 }		
	if (decimal & 64) { bit7 = 1 }		
	if (decimal & 32) { bit6 = 1 }		
	if (decimal & 16) { bit5 = 1 }		
	if (decimal & 8) { bit4 = 1 }		
	if (decimal & 4) { bit3 = 1 }		
	if (decimal & 2) { bit2 = 1 }		
	if (decimal & 1) { bit1 = 1 }				
	return (""+bit8+bit7+bit6+bit5+bit4+bit3+bit2+bit1);	
	}

function d2bits(decimal)
	{		
	var bits=0;				
	if (decimal & 128) { bits = bits + 1 }		
	if (decimal & 64) { bits = bits + 1 }		
	if (decimal & 32) { bits = bits + 1 }		
	if (decimal & 16) { bits = bits + 1 }		
	if (decimal & 8) { bits = bits + 1 }		
	if (decimal & 4) { bits = bits + 1 }		
	if (decimal & 2) { bits = bits + 1 }		
	if (decimal & 1) { bits = bits + 1 }				
	return (bits);	
	}

function snmcorrect(decimal)
	{
	snmcorr = decimal;
	if (decimal > 255) snmcorr = 255;
	if (decimal == 253) snmcorr = 254;
	if ((decimal > 248)  && (decimal < 252)) snmcorr = 252;
	if ((decimal > 240)  && (decimal < 248)) snmcorr = 248;
	if ((decimal > 224)  && (decimal < 240)) snmcorr = 240;
	if ((decimal > 192)  && (decimal < 224)) snmcorr = 224;
	if ((decimal > 128)  && (decimal < 192)) snmcorr = 192;
	if ((decimal > 0)  && (decimal < 128)) snmcorr = 128;
	if (decimal < 0) snmcorr = 0;
	return (snmcorr);
	}

function b2d(binary) {		
	var decimal = 0;				
	while (binary.length < 8)
		{			
		binary = "0" + binary;		
		}				
	if (binary.substring(7,8) == "1") { decimal++ }		
	if (binary.substring(6,7) == "1") { decimal = decimal + 2 }		
	if (binary.substring(5,6) == "1") { decimal = decimal + 4 }		
	if (binary.substring(4,5) == "1") { decimal = decimal + 8 }		
	if (binary.substring(3,4) == "1") { decimal = decimal + 16 }		
	if (binary.substring(2,3) == "1") { decimal = decimal + 32 }		
	if (binary.substring(1,2) == "1") { decimal = decimal + 64 }		
	if (binary.substring(0,1) == "1") { decimal = decimal + 128 }				
	return(decimal);	
	}		

function bits2d(binary) {		
	var decimal = 0;				
	if (binary > 0) { decimal = decimal + 128 }				
	if (binary > 1) { decimal = decimal + 64 }				
	if (binary > 2) { decimal = decimal + 32 }				
	if (binary > 3) { decimal = decimal + 16 }				
	if (binary > 4) { decimal = decimal + 8 }				
	if (binary > 5) { decimal = decimal + 4 }				
	if (binary > 6) { decimal = decimal + 2 }				
	if (binary > 7) { decimal = decimal + 1 }				
	return(decimal);	
	}		

function SetCookieValues(name, value) 
	{
	var expDate = new Date(); 		// The expDate is the date when the cookie should expire, we will keep it for a year
	expDate.setTime( expDate.getTime() + (365 * 24 * 60 * 60 * 1000) ); 
		
	SetCookie( name, value, expDate); 	
	}

function getCookieVal(offset) 
	{
	var endstr = document.cookie.indexOf (";", offset);
	if (endstr == -1)
	      endstr = document.cookie.length;
	return unescape(document.cookie.substring(offset, endstr));
	}
    
function GetCookie(name) 
	{
      	var arg = name + "=";
      	var alen = arg.length;
      	var clen = document.cookie.length;
      	var i = 0;
      	while (i < clen)
		{
        	var j = i + alen;
        	if (document.cookie.substring(i, j) == arg)
          		return getCookieVal (j);
        	i = document.cookie.indexOf(" ", i) + 1;
        	if (i == 0) break; 
	      	}
	return null;
	}
    
function SetCookie(name, value)
	{
	var argv = SetCookie.arguments;
	var argc = SetCookie.arguments.length;
	var expires = (argc > 2) ? argv[2] : null;
	var path = (argc > 3) ? argv[3] : null;
	var domain = (argc > 4) ? argv[4] : null;
	var secure = (argc > 5) ? argv[5] : false;
	document.cookie = name + "=" + escape (value) +
        	((expires == null) ? "" : ("; expires=" + expires.toGMTString())) +
        	((path == null) ? "" : ("; path=" + path)) +
        	((domain == null) ? "" : ("; domain=" + domain)) +
        	((secure == true) ? "; secure" : "");
	}
   
function DeleteCookie(name)
	{
	var exp = new Date();
	exp.setTime (exp.getTime() - 1);  // This cookie is history
	var cval = GetCookie (name);
	document.cookie = name + "=" + cval + "; expires=" + exp.toGMTString();
	}
</SCRIPT>

<SCRIPT type=text/javascript>
	var code = 'unknown';
	var version = 0;
	var platform = 'Win';
	var j = 0;
	var i = navigator.userAgent.indexOf('MSIE');
	if (i >= 0 && j == 0) 
		{
		code = 'MSIE';
		version = parseFloat(navigator.userAgent.substring(i+5, i+9));
		j = 1;
		}
	i = navigator.userAgent.indexOf('Opera');
	if (i >= 0 && j == 0) 
		{
		code = 'Opera';
		version = parseFloat(navigator.userAgent.substring(i+5, i+11));
		j = 1;
		}
	i = navigator.userAgent.indexOf('Mozilla/');
	if (i >= 0 && j == 0) 
		{
		code = 'NS';
		version = parseFloat(navigator.userAgent.substring(i+8, i+12));
		}
	if (navigator.userAgent.indexOf('Mac') >= 0) {platform = 'Mac';}
	if (navigator.userAgent.indexOf('OS/2') >= 0) {platform = 'OS/2';}
	if (navigator.userAgent.indexOf('X11') >= 0) {platform = 'UNIX';}
	//alert(code+" "+version+" "+platform); 

function initPage()
	{
	var f = document.forms[0];
	if (f.elements.length)
		{
		if (GetCookie('oct1') != null)
                        {
			f.oct1.value = GetCookie('oct1');
                        }
                else
                        {
                        f.oct1.value = 192;
                        }
		if (GetCookie('oct2') != null)
                        {
			f.oct2.value = GetCookie('oct2');
                        }
                else
                        {
                        f.oct2.value = 168;
                        }
		if (GetCookie('oct3') != null)
                        {
			f.oct3.value = GetCookie('oct3');
                        }
                else
                        {
                        f.oct3.value = 0;
                        }
		if (GetCookie('oct4') != null)
                        {
			f.oct4.value = GetCookie('oct4');
                        }
                else
                        {
                        f.oct4.value = 0;
                        }
		if (GetCookie('cf') != null)
			{
			var cf = GetCookie('cf'); 
			f.cf[cf-1].checked = 1;
			}
		if (GetCookie('node') != null) 
			f.node.options.selectedIndex = GetCookie('node');
		if (GetCookie('network') != null)
			f.network.options.selectedIndex = GetCookie('network');

		compute2(f);

		if (GetCookie('dec1b') != null) 
			{
			f.dec1b.value = GetCookie('dec1b');
			}
		else
			{
			f.dec1b.value = 0;
			}

		SetOrder();

		}
	else
		{
		setTimeout("initPage();", 100);
		}
	}


function listsubnets(f)
{
	compute(f);
	if (f.nwclass.value != "非法")
	{
		SubnetWindow=window.open("","SubnetWindow","width=500,height=640,scrollbars=yes,menubar=yes,status=yes,resizable=yes,left=0,top=0");
		SubnetWindow.document.write("<h1>网络列表<\/h1>");
		networks=f.nwquant.value;
		nodes=f.nodequant.value+2;
		SubnetWindow.status="创建表";
		if (f.subsuper.value == "子网化为")
			{
			var count=0;
			SubnetWindow.status="创建表";
			if (f.nwclass1.value == "C类")
				{
				SubnetWindow.document.write("<h3>对于 "+f.nw1a.value+"."+f.nw2a.value+"."+f.nw3a.value+".0 网络 ");
				SubnetWindow.document.write("以及子网掩码 "+f.snm1.value+"."+f.snm2.value+"."+f.snm3.value+"."+f.snm4.value+"<\/h3>");
				SubnetWindow.document.write("<table border=1>");
				SubnetWindow.document.write("<tr><td rowspan=2 align=center><b>网络<\/b><\/td><td colspan=2 align=center><b>主机数<\/b><\/td><td rowspan=2 align=center><b>广播地址<\/b><\/td><\/tr>");
				SubnetWindow.document.write("<tr><td align=center><b>从<\/b><\/td><td align=center><b>到<\/b><\/td><\/tr>");
				nodes = ((256/networks));
				for (var i=0; i < 256; i=i+nodes)
					{
					j=i+1;
					topi = (i+nodes-1) & 255;
					topj = topi-1;
					SubnetWindow.document.write("<tr><td>"+f.oct1.value+"."+f.oct2.value+"."+f.oct3.value+"."+ i +"<\/td><td>"+f.oct1.value+"."+f.oct2.value+"."+f.oct3.value+"."+ j +"<\/td><td>"+f.oct1.value+"."+f.oct2.value+"."+f.oct3.value+"."+ topj + "<\/td><td>"+f.oct1.value+"."+f.oct2.value+"."+f.oct3.value+"."+topi+"<\/td><\/tr>");
					}	
				}
			if (f.nwclass1.value == "B类")
				{
				SubnetWindow.document.write("<h3>对于 "+f.nw1a.value+"."+f.nw2a.value+".0.0 网络 ");
				SubnetWindow.document.write("以及子网掩码 "+f.snm1.value+"."+f.snm2.value+"."+f.snm3.value+"."+f.snm4.value+"<\/h3>");
				SubnetWindow.document.write("<table border=1>");
				SubnetWindow.document.write("<tr><td rowspan=2 align=center><b>网络<\/b><\/td><td colspan=2 align=center><b>主机数<\/b><\/td><td rowspan=2 align=center><b>广播地址<\/b><\/td><\/tr>");
				SubnetWindow.document.write("<tr><td align=center><b>从<\/b><\/td><td align=center><b>到<\/b><\/td><\/tr>");
				nodes = ((65536/networks));
				for (var i=0; i < 65536; i=i+nodes)
					{
					count=count+1;
					i4 = i & 255;
					i3 = (i/256) & 255;
					j=i4+1;
					topi4 = ((i+nodes)-1) & 255;
					topi3 = (((i+nodes)-1)/256) & 255;
					topj = topi4-1;
					SubnetWindow.document.write("<tr><td>"+f.oct1.value+"."+f.oct2.value+"."+ i3 +"."+ i4 +"<\/td><td>"+f.oct1.value+"."+f.oct2.value+"."+ i3 +"."+ j +"<\/td><td>"+f.oct1.value+"."+f.oct2.value+"."+ topi3 +"."+ topj + "<\/td><td>"+f.oct1.value+"."+f.oct2.value+"."+ topi3 +"."+ topi4 +"<\/td><\/tr>");
					if ((count == 256) && (networks > 512)) 
						{
						SubnetWindow.document.write("<tr><td>..<\/td><td>..<\/td><td>..<\/td><td>..<\/td><\/tr>");
						i=65536-(count*nodes);
						}
					}	
				}
			if (f.nwclass1.value == "A类")
				{
				SubnetWindow.document.write("<h3>对于 "+f.nw1a.value+".0.0.0 网络 ");
				SubnetWindow.document.write("以及子网掩码 "+f.snm1.value+"."+f.snm2.value+"."+f.snm3.value+"."+f.snm4.value+"<\/h3>");
				SubnetWindow.document.write("<table border=1>");
				SubnetWindow.document.write("<tr><td rowspan=2 align=center><b>网络<\/b><\/td><td colspan=2 align=center><b>主机数<\/b><\/td><td rowspan=2 align=center><b>广播地址<\/b><\/td><\/tr>");
				SubnetWindow.document.write("<tr><td align=center><b>从<\/b><\/td><td align=center><b>到<\/b><\/td><\/tr>");
				nodes = ((16777216/networks));
				for (var i=0; i < 16777216; i=i+nodes)
					{
					count=count+1;
					i4 = i & 255;
					i3 = (i/256) & 255;
					i2 = (i/65536) & 255;
					j=i4+1;
					topi4 = ((i+nodes)-1) & 255;
					topi3 = (((i+nodes)-1)/256) & 255;
					topi2 = (((i+nodes)-1)/65536)& 255
					topj = topi4-1;
					SubnetWindow.document.write("<tr><td>"+f.oct1.value+"."+ i2 +"."+ i3 +"."+ i4 +"<\/td><td>"+f.oct1.value+"."+ i2 +"."+ i3 +"."+ j +"<\/td><td>"+f.oct1.value+"."+ topi2 +"."+ topi3 +"."+ topj + "<\/td><td>"+f.oct1.value+"."+ topi2 +"."+ topi3 +"."+ topi4 +"<\/td><\/tr>");
					if ((count == 256) && (networks > 512)) 
						{
						SubnetWindow.document.write("<tr><td>..<\/td><td>..<\/td><td>..<\/td><td>..<\/td><\/tr>");
						i=16777216-(count*nodes);
						}
					}	
				}
			}
		if (f.subsuper.value == "超网化")
			{
			SubnetWindow.document.write("<h3>对于 "+f.nw1a.value+"."+f.nw2a.value+"."+f.nw3a.value+".0 网络 ");
			SubnetWindow.document.write("以及子网掩码 "+f.snm1.value+"."+f.snm2.value+"."+f.snm3.value+"."+f.snm4.value+"<\/h3>");
			SubnetWindow.document.write("<table border=1>");
				SubnetWindow.document.write("<tr><td rowspan=2 align=center><b>网络<\/b><\/td><td colspan=2 align=center><b>主机数<\/b><\/td><td rowspan=2 align=center><b>广播地址<\/b><\/td><\/tr>");
				SubnetWindow.document.write("<tr><td align=center><b>从<\/b><\/td><td align=center><b>到<\/b><\/td><\/tr>");
			i=f.nw4a.value+1
			j=f.broad4a.value-1
			SubnetWindow.document.write("<tr><td>"+f.nw1a.value+"."+f.nw2a.value+"."+f.nw3a.value+"."+f.nw4a.value+"<\/td><td>"+f.nw1a.value+"."+f.nw2a.value+"."+f.nw3a.value+"."+ i +"<\/td><td>"+f.broad1a.value+"."+f.broad2a.value+"."+f.broad3a.value+"."+ j + "<\/td><td>"+f.broad1a.value+"."+f.broad2a.value+"."+f.broad3a.value+"."+f.broad4a.value+"<\/td><\/tr>");
			}
		SubnetWindow.document.write("<\/table>");
		SubnetWindow.status="完成";
		}
}
	
function compute2(f)
	{
      var cf = 1; 
	if (f.cf[1].checked=="1") cf=f.cf[1].value;
	if (f.cf[2].checked=="1") cf=f.cf[2].value;
	if (f.cf[3].checked=="1") cf=f.cf[3].value;
	if (code == "MSIE") 
		{
		var node=f.node.value;
		var nw=f.network.value;
		if (node > 0) 
			{
			nw=0;
			f.network.options.selectedIndex=0;
			node=eval(eval(node)+2);
			}
		}
	else
		{
		var i = f.node.selectedIndex;
		var node=parseInt(f.node.options[i].value);
		var j = f.network.selectedIndex;
		var nw=parseInt(f.network.options[j].value);
		if (node > 0) 
			{
			nw=0;
			f.network.options.selectedIndex=0;
			node=eval(eval(node)+2);
			}
		}

	if ((nw == 0) && (node == 0)) nw=1;
	var power2=2;
		
	// 决定网络的种类，计算子网掩码
	if (f.oct1.value > 255) f.oct1.value=255;
	if (f.oct2.value > 255) f.oct2.value=255;
	if (f.oct3.value > 255) f.oct3.value=255;
	if (f.oct4.value > 255) f.oct4.value=255;
	if ((f.oct1.value > 0) && (f.oct1.value < 127)) f.nwclass.value="A类";
	if ((f.oct1.value > 127) && (f.oct1.value < 192)) f.nwclass.value="B类";
	if ((f.oct1.value > 191) && (f.oct1.value < 224)) f.nwclass.value="C类";
	if ((f.oct1.value < 1) || (f.oct1.value > 223))
		{
		f.nwclass.value="非法";
		f.nwclass1.value="";
		f.subsuper.value="";
		f.nwquant.value=0;
		f.nodequant.value=0;
		f.snm1.value=0;
		f.snm2.value=0;
		f.snm3.value=0;
		f.snm4.value=0;
		f.snmbits.value=0;
		}
	if (((f.nwclass.value == "A类") && (cf == 1)) || ((cf == 2) && (f.nwclass.value != "Illegal")))
		{
		if (nw >= 1) node=16777216/nw;
		var nwtemp;
		if (node > 16777216)  	//supernetted
			{
			f.nwclass1.value="";
			nw = 1073741824/node;
			nwtemp = nw;
			f.snm1.value=(~((64/nw)-1) & 255);
			f.snm2.value=0;
			f.snm3.value=0;
			f.snm4.value=0;
			f.subsuper.value="超网化";
			nw=1;
			}
		else			//subnetted
			{
			f.nwclass1.value="A类";
			nw = 16777216/node;
			nwtemp = nw;
			f.snm1.value=255;
			f.snm2.value=(~((256/nw)-1) & 255);
			f.snm3.value=(~((65536/nw)-1) & 255);
			f.snm4.value=(~((16777216/nw)-1) & 255);
			f.subsuper.value="子网化为";
			power2=power2+6;
			}
		while (nwtemp > 1 )
			{
			nwtemp=nwtemp/2;
			power2=power2+1;
			}
		f.nodequant.value=node-2;
		f.nwquant.value=nw;
		f.snmbits.value="/"+power2;
		}

	if (((f.nwclass.value == "B类") && (cf == 1)) || ((cf == 3) && (f.nwclass.value != "非法")))
		{
		if (nw > 16384) nw=16384;
		if (nw >= 1) node=65536/nw;
		var nwtemp;
		if (node > 65536)	//supernetted
			{
			f.nwclass1.value="";
			nw = 1073741824/node;
			nwtemp = nw;
			f.snm1.value=(~((64/nw)-1) & 255);
			f.snm2.value=(~((16384/nw)-1) & 255);
			f.snm3.value=0;
			f.snm4.value=0;
			f.subsuper.value="超网化";
			nw=1;
			}
		else			//subnetted
			{
			f.nwclass1.value="B类";
			nw = 65536/node;
			nwtemp = nw;
			f.snm1.value=255;
			f.snm2.value=255;
			f.snm3.value=(~((256/nw)-1) & 255);
			f.snm4.value=(~((65536/nw)-1) & 255);
			f.subsuper.value="子网化为";
			power2=power2+14;
			}
		while (nwtemp > 1 )
			{
			nwtemp=nwtemp/2;
			power2=power2+1;
			}
		f.nodequant.value=node-2;
		f.nwquant.value=nw;
		f.snmbits.value="/"+power2;
		}
	
	if (((f.nwclass.value == "C类") && (cf == 1)) || ((cf == 4) && (f.nwclass.value != "Illegal")))
		{
		if (nw > 64) nw=64;
		if (nw >= 1) node=256/nw;
		var nwtemp;
		if (node > 256)  	//supernetted
			{
			f.nwclass1.value="";
			nw = 1073741824/node;
			nwtemp = nw;
			f.snm1.value=(~((64/nw)-1) & 255);
			f.snm2.value=(~((16384/nw)-1) & 255);
			f.snm3.value=(~((4194304/nw)-1) & 255);
			f.snm4.value=0;
			f.subsuper.value="超网化";
			nw=1;
			}
		else			//subnetted
			{
			f.nwclass1.value="C类";
			nw = 256/node;
			nwtemp = nw;
			f.snm1.value=255;
			f.snm2.value=255;
			f.snm3.value=255;
			f.snm4.value=(~((256/nw)-1) & 255);
			f.subsuper.value="子网化为";
			power2=power2+22;
			}
		while (nwtemp > 1 )
			{
			nwtemp=nwtemp/2;
			power2=power2+1;
			}
		f.nodequant.value=node-2;
		f.nwquant.value=nw;
		f.snmbits.value="/"+power2;
		}
	f.snm1a.value = f.snm1.value;
	f.snm2a.value = f.snm2.value;
	f.snm3a.value = f.snm3.value;
	f.snm4a.value = f.snm4.value;

	f.oct1a.value = f.oct1.value;
	f.oct2a.value = f.oct2.value;
	f.oct3a.value = f.oct3.value;
	f.oct4a.value = f.oct4.value;

	f.oct1b.value = f.oct1.value;
	f.oct2b.value = f.oct2.value;
	f.oct3b.value = f.oct3.value;
	f.oct4b.value = f.oct4.value;

	compute(f);
	compute3(f);

	f.snm1c.value = f.snm1.value;
	f.snm2c.value = f.snm2.value;
	f.snm3c.value = f.snm3.value;
	f.snm4c.value = f.snm4.value;
	
	computeSNMA(f);

	if (((f.nw1a.value == 0) && (f.nw2a.value == 0) && (f.nw3a.value == 0) && (f.nw4a.value == 0)) || ((f.broad1a.value == 255) && (f.broad2a.value == 255) && (f.broad3a.value == 255) && (f.broad4a.value == 255)))
		{
		f.nwclass.value="Illegal";
		f.nwclass1.value="";
		f.subsuper.value="";
		f.nwquant.value=0;
		f.nodequant.value=0;
		f.snm1.value=0;
		f.snm2.value=0;
		f.snm3.value=0;
		f.snm4.value=0;
		f.snmbits.value=0;
		}
	SetCookieValues('oct1', f.oct1.value);
	SetCookieValues('oct2', f.oct2.value);
	SetCookieValues('oct3', f.oct3.value);
	SetCookieValues('oct4', f.oct4.value);
	SetCookieValues('node', f.node.selectedIndex);
	SetCookieValues('network', f.network.selectedIndex);
	SetCookieValues('cf', cf);
	
	}

function compute(f)
	{
	if (f.oct1a.value > 255) f.oct1a.value=255;
	if (f.oct2a.value > 255) f.oct2a.value=255;
	if (f.oct3a.value > 255) f.oct3a.value=255;
	if (f.oct4a.value > 255) f.oct4a.value=255;
	if (f.snm1a.value > 255) f.snm1a.value=255;
	if (f.snm2a.value > 255) f.snm2a.value=255;
	if (f.snm3a.value > 255) f.snm3a.value=255;
	if (f.snm4a.value > 255) f.snm4a.value=255;
	f.nw1a.value = eval(f.snm1a.value & f.oct1a.value);
	f.nw2a.value = eval(f.snm2a.value & f.oct2a.value);
	f.nw3a.value = eval(f.snm3a.value & f.oct3a.value);
	f.nw4a.value = eval(f.snm4a.value & f.oct4a.value);
	f.node1a.value = eval(~ f.snm1a.value & f.oct1a.value);
	f.node2a.value = eval(~ f.snm2a.value & f.oct2a.value);
	f.node3a.value = eval(~ f.snm3a.value & f.oct3a.value);
	f.node4a.value = eval(~ f.snm4a.value & f.oct4a.value);
	f.broad1a.value = ((f.nw1a.value) ^ (~ f.snm1a.value) & 255);
	f.broad2a.value = ((f.nw2a.value) ^ (~ f.snm2a.value) & 255);
	f.broad3a.value = ((f.nw3a.value) ^ (~ f.snm3a.value) & 255);
	f.broad4a.value = ((f.nw4a.value) ^ (~ f.snm4a.value) & 255);

	SetCookieValues('oct1a', f.oct1a.value);
	SetCookieValues('oct2a', f.oct2a.value);
	SetCookieValues('oct3a', f.oct3a.value);
	SetCookieValues('oct4a', f.oct4a.value);
	SetCookieValues('snm1a', f.snm1a.value);
	SetCookieValues('snm2a', f.snm2a.value);
	SetCookieValues('snm3a', f.snm3a.value);
	SetCookieValues('snm4a', f.snm4a.value);

	}

function compute3(f)
	{
	if (f.oct1b.value > 255) f.oct1b.value=255;
	if (f.oct2b.value > 255) f.oct2b.value=255;
	if (f.oct3b.value > 255) f.oct3b.value=255;
	if (f.oct4b.value > 255) f.oct4b.value=255;
	f.bin1b.value = d2b(f.oct1b.value);
	f.bin2b.value = d2b(f.oct2b.value);
	f.bin3b.value = d2b(f.oct3b.value);
	f.bin4b.value = d2b(f.oct4b.value);
	f.hex1b.value = d2h(f.oct1b.value);
	f.hex2b.value = d2h(f.oct2b.value);
	f.hex3b.value = d2h(f.oct3b.value);
	f.hex4b.value = d2h(f.oct4b.value);
	f.dec1b.value = eval(f.oct1b.value*16777216) + eval(f.oct2b.value*65536) + eval(f.oct3b.value*256) + eval(f.oct4b.value);
	SetCookieValues('dec1b', f.dec1b.value);
	}
function compute4(f)
	{
	f.oct1b.value = b2d(f.bin1b.value);
	f.oct2b.value = b2d(f.bin2b.value);
	f.oct3b.value = b2d(f.bin3b.value);
	f.oct4b.value = b2d(f.bin4b.value);
	f.hex1b.value = d2h(f.oct1b.value);
	f.hex2b.value = d2h(f.oct2b.value);
	f.hex3b.value = d2h(f.oct3b.value);
	f.hex4b.value = d2h(f.oct4b.value);
	f.dec1b.value = eval(f.oct1b.value*16777216) + eval(f.oct2b.value*65536) + eval(f.oct3b.value*256) + eval(f.oct4b.value);
	SetCookieValues('dec1b', f.dec1b.value);
	}
function compute5(f)
	{
	f.oct1b.value = h2d(f.hex1b.value);
	f.oct2b.value = h2d(f.hex2b.value);
	f.oct3b.value = h2d(f.hex3b.value);
	f.oct4b.value = h2d(f.hex4b.value);
	f.bin1b.value = d2b(f.oct1b.value);
	f.bin2b.value = d2b(f.oct2b.value);
	f.bin3b.value = d2b(f.oct3b.value);
	f.bin4b.value = d2b(f.oct4b.value);
	f.dec1b.value = eval(f.oct1b.value*16777216) + eval(f.oct2b.value*65536) + eval(f.oct3b.value*256) + eval(f.oct4b.value);
	SetCookieValues('dec1b', f.dec1b.value);
	}
function compute6(f)
	{
	f.oct1b.value = f.dec1b.value >>> 24;
	f.oct2b.value = (f.dec1b.value << 8) >>> 24;
	f.oct3b.value = (f.dec1b.value << 16) >>> 24;
	f.oct4b.value = (f.dec1b.value << 24) >>> 24;
	f.bin1b.value = d2b(f.oct1b.value);
	f.bin2b.value = d2b(f.oct2b.value);
	f.bin3b.value = d2b(f.oct3b.value);
	f.bin4b.value = d2b(f.oct4b.value);
	f.hex1b.value = d2h(f.oct1b.value);
	f.hex2b.value = d2h(f.oct2b.value);
	f.hex3b.value = d2h(f.oct3b.value);
	f.hex4b.value = d2h(f.oct4b.value);
	SetCookieValues('dec1b', f.dec1b.value);
	}

function computeSNMA(f)
	{
	
	f.snm1c.value = snmcorrect(f.snm1c.value); 
	if (f.snm1c.value < 255)
		{
		f.snm2c.value = 0;
		f.snm3c.value = 0;
		f.snm4c.value = 0;
		}
	else	
		{
		f.snm2c.value = snmcorrect(f.snm2c.value); 
		if (f.snm2c.value < 255)
			{
			f.snm1c.value = 255;
			f.snm3c.value = 0;
			f.snm4c.value = 0;
			}
		else
			{
			f.snm3c.value = snmcorrect(f.snm3c.value); 
			if (f.snm3c.value < 255)
				{
				f.snm1c.value = 255;
				f.snm2c.value = 255;
				f.snm4c.value = 0;
				}
			else
				{
				f.snm4c.value = snmcorrect(f.snm4c.value); 
				}
			}
		}
		
	bits=0;
	bits=bits+d2bits(f.snm1c.value);
	bits=bits+d2bits(f.snm2c.value);
	bits=bits+d2bits(f.snm3c.value);
	bits=bits+d2bits(f.snm4c.value);
	f.snmbitsc.value = bits;

	}
function computeSNMB(f)
	{
	if (f.snmbitsc.value < 0) f.snmbitsc.value = 0;
	if (f.snmbitsc.value > 32) f.snmbitsc.value = 32;
	f.snm1c.value=bits2d(f.snmbitsc.value);
	f.snm2c.value=bits2d(f.snmbitsc.value - 8);
	f.snm3c.value=bits2d(f.snmbitsc.value - 16);
	f.snm4c.value=bits2d(f.snmbitsc.value - 24);
	}	
</SCRIPT>

<META content="Microsoft FrontPage 5.0" name=GENERATOR>
<meta name="ProgId" content="FrontPage.Editor.Document">
</HEAD>
<BODY text=#ffcc33 vLink=#000080 aLink=#800080 bgColor=#000000 
onload=initPage(); style="background-color: #F0F7FF; color:#000080">
<P align="center"><b><FONT size=5>网络计算器</FONT></b><HR></P>
<P>
<FORM action=... method=post>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD colSpan=3>
      <H4>子网掩码计算器</H4></TD></TR>
  <TR>
    <TD>请输入 TCPIP 网络地址：</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=3 size=3 name=oct1><INPUT   
      onkeyup=Jump() maxLength=3 size=3 name=oct2><INPUT onkeyup=Jump()   
      maxLength=3 size=3 name=oct3><INPUT maxLength=3 size=3 name=oct4></TD>  
    <TD align=right width=150></TD></TR>  
  <TR>  
    <TD>强制类别:</TD>  
    <TD align=right><INPUT type=radio CHECKED value=1 name=cf>缺省 <INPUT   
      type=radio value=2 name=cf>A类 <INPUT type=radio value=3 name=cf>B类 <INPUT   
      type=radio value=4 name=cf>C类 </TD>  
    <TD align=right width=150></TD></TR>  
  <TR>  
    <TD>请输入所要求的子网数目:</TD>  
    <TD align=right><SELECT onchange=EmptyHosts() size=1 name=network>   
        <OPTION value=0 selected></OPTION> <OPTION value=1>1</OPTION> <OPTION   
        value=2>2</OPTION> <OPTION value=4>4</OPTION> <OPTION value=8>8</OPTION>   
        <OPTION value=16>16</OPTION> <OPTION value=32>32</OPTION> <OPTION   
        value=64>64</OPTION> <OPTION value=128>128</OPTION> <OPTION   
        value=256>256</OPTION> <OPTION value=512>512</OPTION> <OPTION   
        value=1024>1024</OPTION> <OPTION value=2048>2048</OPTION> <OPTION   
        value=4096>4096</OPTION> <OPTION value=8192>8192</OPTION> <OPTION   
        value=16384>16384</OPTION> <OPTION value=32768>32768</OPTION> <OPTION   
        value=65536>65536</OPTION> <OPTION value=131072>131072</OPTION> <OPTION   
        value=262144>262144</OPTION> <OPTION value=524288>524288</OPTION>   
        <OPTION value=1048576>1048576</OPTION> <OPTION   
        value=2097152>2097152</OPTION> <OPTION   
      value=4194304>4194304</OPTION></SELECT> </TD>  
    <TD></TD></TR>  
  <TR>  
    <TD width=300>或者请输入每个子网的节点数/主机数:</TD>  
    <TD align=right><SELECT onchange=EmptyNetwork() size=1 name=node>   
        <OPTION value=0 selected></OPTION> <OPTION value=2>2</OPTION> <OPTION   
        value=6>6</OPTION> <OPTION value=14>14</OPTION> <OPTION   
        value=30>30</OPTION> <OPTION value=62>62</OPTION> <OPTION   
        value=126>126</OPTION> <OPTION value=254>254</OPTION> <OPTION   
        value=510>510</OPTION> <OPTION value=1022>1022</OPTION> <OPTION   
        value=2046>2046</OPTION> <OPTION value=4094>4094</OPTION> <OPTION   
        value=8190>8190</OPTION> <OPTION value=16382>16382</OPTION> <OPTION   
        value=32766>32766</OPTION> <OPTION value=65534>65534</OPTION> <OPTION   
        value=131070>131070</OPTION> <OPTION value=262142>262142</OPTION>   
        <OPTION value=524286>524286</OPTION> <OPTION   
        value=1048574>1048574</OPTION> <OPTION value=2097150>2097150</OPTION>   
        <OPTION value=4194302>4194302</OPTION> <OPTION   
        value=8388606>8388606</OPTION> <OPTION value=16777214>16777214</OPTION>   
        <OPTION value=33554430>33554430</OPTION> <OPTION   
        value=67108862>67108862</OPTION> <OPTION   
        value=134217726>134217726</OPTION> <OPTION   
        value=268435454>268435454</OPTION> <OPTION   
        value=536870910>536870910</OPTION> <OPTION   
        value=1073741822>1073741822</OPTION></SELECT> </TD>  
    <TD align=right width=150><INPUT class=button onclick=compute2(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD colSpan=3>  
      <HR>  
    </TD></TR>  
  <TR>  
    <TD>网络类型:</TD>  
    <TD align=right><INPUT maxLength=7 size=7 name=nwclass><INPUT maxLength=14   
      size=14 name=subsuper><INPUT maxLength=7 size=7 name=nwclass1></TD>  
    <TD></TD></TR>  
  <TR>  
    <TD>子网掩码:</TD>  
    <TD align=right><INPUT maxLength=3 size=3 name=snm1><INPUT maxLength=3   
      size=3 name=snm2><INPUT maxLength=3 size=3 name=snm3><INPUT maxLength=3   
      size=3 name=snm4> or <INPUT maxLength=3 size=3 name=snmbits></TD>  
    <TD></TD></TR>  
  <TR>  
    <TD>子网数目:</TD>  
    <TD align=right><INPUT maxLength=8 size=10 name=nwquant></TD>  
    <TD align=right><INPUT class=button onclick=listsubnets(this.form) type=button value=列出网络></TD></TR>
  <TR>  
    <TD>每个网络的节点/主机数:</TD>  
    <TD align=right><INPUT maxLength=8 size=10 name=nodequant></TD></TR>
  <TR>  
    <TD colSpan=3>  
      <HR>  
  
      <HR>  
      <BR></TD></TR>  
  <TR>  
    <TD colSpan=3>  
      <H4>网络/节点计算器</H4></TD></TR>  
  <TR>  
    <TD>输入子网掩码:</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=3 size=3 name=snm1a><INPUT   
      onkeyup=Jump() maxLength=3 size=3 name=snm2a><INPUT onkeyup=Jump()   
      maxLength=3 size=3 name=snm3a><INPUT onkeyup=Jump() maxLength=3 size=3   
      name=snm4a></TD>  
    <TD></TD></TR>  
  <TR>  
    <TD>输入TCPIP地址:</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=3 size=3 name=oct1a><INPUT   
      onkeyup=Jump() maxLength=3 size=3 name=oct2a><INPUT onkeyup=Jump()   
      maxLength=3 size=3 name=oct3a><INPUT onkeyup=Jump() maxLength=3 size=3   
      name=oct4a></TD>  
    <TD align=right width=150><INPUT class=button onclick=compute(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD colSpan=3>  
      <HR>  
    </TD></TR>  
  <TR>  
    <TD>网络：</TD>  
    <TD align=right><INPUT maxLength=3 size=3 name=nw1a><INPUT maxLength=3   
      size=3 name=nw2a><INPUT maxLength=3 size=3 name=nw3a><INPUT maxLength=3   
      size=3 name=nw4a></TD>  
    <TD></TD></TR>  
  <TR>  
    <TD>节点/主机:</TD>  
    <TD align=right><INPUT maxLength=3 size=3 name=node1a><INPUT maxLength=3   
      size=3 name=node2a><INPUT maxLength=3 size=3 name=node3a><INPUT   
      maxLength=3 size=3 name=node4a></TD>  
    <TD></TD></TR>  
  <TR>  
    <TD>广播地址:</TD>  
    <TD align=right><INPUT maxLength=3 size=3 name=broad1a><INPUT maxLength=3   
      size=3 name=broad2a><INPUT maxLength=3 size=3 name=broad3a><INPUT   
      maxLength=3 size=3 name=broad4a></TD>  
  </TR>  
  <TR>  
    <TD colSpan=3>  
      <HR>  
  
      <HR>  
      <BR></TD></TR>  
  <TR>  
    <TD colSpan=3>  
      <H4>IP 地址转换器</H4></TD></TR>  
  <TR>  
    <TD>输入带点的十进制IP地址:</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=3 size=3 name=oct1b><INPUT   
      onkeyup=Jump() maxLength=3 size=3 name=oct2b><INPUT onkeyup=Jump()   
      maxLength=3 size=3 name=oct3b><INPUT onkeyup=Jump() maxLength=3 size=3   
      name=oct4b></TD>  
    <TD align=right width=150><INPUT class=button onclick=compute3(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD>或者输入十进制IP地址:</TD>  
    <TD align=right><INPUT maxLength=10 size=10 name=dec1b></TD>  
    <TD align=right width=150><INPUT class=button onclick=compute6(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD>或者输入二进制TCPIP 地址:</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=8 size=8 name=bin1b><INPUT   
      onkeyup=Jump() maxLength=8 size=8 name=bin2b><INPUT onkeyup=Jump()   
      maxLength=8 size=8 name=bin3b><INPUT onkeyup=Jump() maxLength=8 size=8   
      name=bin4b></TD>  
    <TD align=right width=150><INPUT class=button onclick=compute4(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD>或者输入十六进制TCPIP地址:</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=2 size=2 name=hex1b><INPUT   
      onkeyup=Jump() maxLength=2 size=2 name=hex2b><INPUT onkeyup=Jump()   
      maxLength=2 size=2 name=hex3b><INPUT onkeyup=Jump() maxLength=2 size=2   
      name=hex4b></TD>  
    <TD align=right width=150><INPUT class=button onclick=compute5(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD></TD>  
    <TD align=right></TD>  
  </TR>  
  <TR>  
    <TD colSpan=3>  
      <HR>  
  
      <HR>  
      <BR></TD></TR>  
  <TR>  
    <TD colSpan=3>  
      <H4>子网掩码转换器</H4></TD></TR>  
  <TR>  
    <TD>请输入带点的十进制子网掩码</TD>  
    <TD align=right><INPUT onkeyup=Jump() maxLength=3 size=3 name=snm1c><INPUT   
      onkeyup=Jump() maxLength=3 size=3 name=snm2c><INPUT onkeyup=Jump()   
      maxLength=3 size=3 name=snm3c><INPUT onkeyup=Jump() maxLength=3 size=3   
      name=snm4c></TD>  
    <TD align=right width=150><INPUT class=button onclick=computeSNMA(this.form) type=button value=计算></TD></TR>  
  <TR>  
    <TD>或者输入子网掩码的的位数</TD>  
    <TD align=right>/<INPUT maxLength=2 size=2 name=snmbitsc></TD>  
    <TD align=right width=150><INPUT class=button onclick=computeSNMB(this.form) type=button value=计算></TD></TR>
</TBODY>
</TABLE>
</FORM>  
<SCRIPT type=text/javascript>  
<!--- Hide script from old browsers  
  
var f = document.forms[0];  
var l=f.elements.length;  
  
function EmptyHosts()  
	{  
	f.node.options.selectedIndex=0;  
	}  
  
function EmptyNetwork()  
	{  
	f.network.options.selectedIndex=0;  
	}  
  
  
function SetOrder()  
	{  
	var c;  
	var k=0;  
 	for (var i=0;i<l-1;i++)  
		{  
		c=f.elements[i];  
		f.elements[i].taborder=i;  
		}  
	return;  
	}  
  
function Jump()  
	{  
	var c=window.event.srcElement;  
	var code=window.event.keyCode;  
	var newc;  
  	if (c.type!="text" || c.value.length < c.maxLength || code < 32 || (code >= 33 && code <= 40) || c.taborder==null) return;  
 	var k=c.taborder;  
 	while (f.elements[k+1].name==c.name)   
		{  
	       	k++;  
       		if (k>=l-1) return;  
		}  
	newc=f.elements[k+1];  
 	if (newc.type!="hidden") newc.focus();  
	if (newc.type=="text") newc.select();  
	}  
  
</SCRIPT> 
<HR> 
 </BODY></HTML>